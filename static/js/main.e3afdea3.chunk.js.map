{"version":3,"sources":["components/DraggableLayer.js","hooks/DragPosition.js","mines.js","components/MinesLayer.js","App.js","reportWebVitals.js","index.js"],"names":["DraggableLayer","posX","posY","onDragMove","useImage","process","image","draggable","x","y","useDragPosition","grid","useState","setPosX","setPosY","e","newX","Math","round","target","newY","to","updateFloor","floorDiff","console","log","useStyles","makeStyles","theme","drawer","alignContent","stage","backgroundColor","MinesDrawer","classes","level","setLevel","lastLevel","setLastLevel","useEffect","floor","clickPrev","useCallback","clickNext","className","ButtonGroup","variant","aria-label","Button","onClick","color","disabled","width","window","innerWidth","height","innerHeight","FloorImage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3afdea3.chunk.js","sourcesContent":["import { Layer, Image } from \"react-konva\";\r\nimport useImage from 'use-image';\r\n\r\nexport function DraggableLayer(posX, posY, onDragMove) {\r\n    const [image] = useImage(`${process.env.PUBLIC_URL}/assets/ladder_grid.png`);\r\n    return (\r\n        <Layer >\r\n            <Image \r\n                image={image} \r\n                draggable={true}\r\n                x={posX}\r\n                y={posY}\r\n                onDragMove={onDragMove}                \r\n            />\r\n        </Layer>\r\n    )\r\n}","import { useState } from 'react';\r\n\r\nfunction useDragPosition() {\r\n    const grid = 16;\r\n    const [posX, setPosX] = useState(-grid*80);\r\n    const [posY, setPosY] = useState(-grid*120);\r\n\r\n    const onDragMove = (e) => {\r\n        // calculate the correct grid loc\r\n        let newX = Math.round(e.target.x() / grid) * grid;\r\n        let newY = Math.round(e.target.y() / grid) * grid;\r\n        setPosX(newX);\r\n        setPosY(newY);\r\n        // setPosition({X:newX, Y:newY})\r\n        // snap to the grid\r\n        e.target.to({x:newX, y:newY});\r\n      }\r\n\r\n    const updateFloor = (floorDiff) => {\r\n        console.log({floorDiff})\r\n        console.log({posY})\r\n        console.log(posY+floorDiff*grid)\r\n        setPosY(posY + floorDiff * grid)\r\n    }\r\n    return {posX, posY, onDragMove, updateFloor}\r\n};\r\n\r\nexport default useDragPosition;","import { useState, useEffect, useCallback } from 'react';\r\nimport { Stage } from 'react-konva';\r\nimport { Button, ButtonGroup, makeStyles } from '@material-ui/core';\r\nimport { MinesLayer } from './components/MinesLayer';\r\nimport { DraggableLayer } from './components/DraggableLayer';\r\nimport useDragPosition from './hooks/DragPosition';\r\nconst useStyles = makeStyles(theme => ({\r\n  drawer: {\r\n    alignContent: 'centered'\r\n  },\r\n  stage: {\r\n    backgroundColor: 'black'\r\n  }\r\n}));\r\n\r\nexport const MinesDrawer = () => {\r\n  const classes = useStyles();\r\n  const [level, setLevel] = useState(1);\r\n  const [lastLevel, setLastLevel] = useState(1);\r\n  const {posX, posY, onDragMove, updateFloor} = useDragPosition();\r\n  \r\n\r\n  // modify the position when level changes\r\n  useEffect(() =>{\r\n    let levelDiff = (level - lastLevel);\r\n    updateFloor(levelDiff);\r\n  }, [lastLevel, level])\r\n\r\n  // go up a floor\r\n  const clickPrev = useCallback(() => {\r\n    setLastLevel(level)\r\n    if (level === 1) { return; }\r\n    let floor = level - 1;\r\n    \r\n    if (floor % 10 === 0) {\r\n      setLevel(floor-1);\r\n    } else {\r\n      setLevel(floor)\r\n    }\r\n  }, [level, setLevel])\r\n\r\n  // go down a floor\r\n  const clickNext = useCallback(() => {\r\n    setLastLevel(level)\r\n    if (level === 119) { return; }\r\n    let floor = level + 1;\r\n\r\n    if (floor % 10 === 0) {\r\n      setLevel(floor+1);\r\n    } else {\r\n      setLevel(floor)\r\n    }\r\n  }, [level, setLevel])\r\n\r\n  return (\r\n    <div className={classes.drawer}>\r\n      <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\r\n        <Button onClick={clickPrev} color=\"secondary\">Prev</Button>\r\n        <Button disabled={true}>{level}</Button>\r\n        <Button onClick={clickNext} color=\"primary\">Next</Button>\r\n      </ButtonGroup>\r\n      \r\n      <div className={classes.drawer}>\r\n      <Stage width={window.innerWidth} height={window.innerHeight} className={classes.stage}>\r\n        {MinesLayer(level % 40)}\r\n        {DraggableLayer(posX, posY, onDragMove)}\r\n      </Stage>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { Layer, Image } from \"react-konva\";\r\nimport useImage from 'use-image';\r\n\r\nexport function MinesLayer(floor) {\r\n    const FloorImage = (level) => {\r\n        const [image] = useImage(`${process.env.PUBLIC_URL}/assets/${level}.png`);\r\n        return <Image image={image} />;\r\n      };\r\n    return (\r\n        <Layer>\r\n            {FloorImage(floor)}\r\n        </Layer>\r\n    )\r\n}","import './App.css';\nimport { MinesDrawer } from './mines';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MinesDrawer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}