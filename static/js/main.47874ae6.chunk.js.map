{"version":3,"sources":["logo.svg","components/DraggableLayer.js","mines.js","components/MinesLayer.js","App.js","reportWebVitals.js","index.js"],"names":["DraggableLayer","position","onDragMove","useImage","image","draggable","x","X","y","Y","useStyles","makeStyles","theme","drawer","alignContent","stage","backgroundColor","MinesDrawer","grid","classes","useState","level","setLevel","setPosition","lastLevel","setLastLevel","minesLayer","useCallback","floor","FloorImage","MinesLayer","useEffect","levelDiff","clickPrev","clickNext","className","ButtonGroup","variant","aria-label","Button","onClick","color","disabled","width","window","innerWidth","height","innerHeight","e","newX","Math","round","target","newY","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAAe,I,oECIR,SAASA,EAAeC,EAAUC,GAAa,IAAD,EACjCC,IAAS,2BAAlBC,EAD0C,oBAGjD,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIA,MAAOA,EACPC,WAAW,EACXC,EAAGL,EAASM,EACZC,EAAGP,EAASQ,EACZP,WAAYA,MCR5B,IAAMQ,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,aAAc,YAEhBC,MAAO,CACLC,gBAAiB,aAIRC,EAAc,WACzB,IAAMC,EAAO,GACPC,EAAUT,IAFe,EAGLU,mBAAS,GAHJ,mBAGxBC,EAHwB,KAGjBC,EAHiB,OAICF,mBAAS,CAACb,GAAE,KAASE,GAAE,OAJxB,mBAIxBR,EAJwB,KAIdsB,EAJc,OAKGH,mBAAS,GALZ,mBAKxBI,EALwB,KAKbC,EALa,KAOzBC,EAAaC,uBAAY,WAE7B,OCrBG,SAAoBC,GAKvB,OACI,cAAC,IAAD,UALe,SAACP,GAAW,IAAD,EACVlB,IAAS,WAAD,OAAYkB,EAAZ,SAAjBjB,EADmB,oBAE1B,OAAO,cAAC,IAAD,CAAOA,MAAOA,IAIhByB,CAAWD,KDcbE,CADKT,EAAQ,MAEnB,CAACA,IAaJU,qBAAU,WACR,IAAIC,GAAaX,EAAQG,GAAaN,EACtCK,EAAY,CAAChB,EAAEN,EAASM,EAAGE,EAAER,EAASQ,EAAEuB,MACvC,CAACR,EAAWH,EAAOE,IAGtB,IAAMU,EAAYN,uBAAY,WAE5B,GADAF,EAAaJ,GACA,GAATA,EAAJ,CACA,IAAIO,EAAQP,EAAQ,EAGlBC,EADEM,EAAQ,IAAM,EACPA,EAAM,EAENA,MAEV,CAACP,EAAOC,IAGLY,EAAYP,uBAAY,WAE5B,GADAF,EAAaJ,GACA,KAATA,EAAJ,CACA,IAAIO,EAAQP,EAAQ,EAGlBC,EADEM,EAAQ,IAAM,EACPA,EAAM,EAENA,MAEV,CAACP,EAAOC,IAEX,OACE,sBAAKa,UAAWhB,EAAQN,OAAxB,UACE,eAACuB,EAAA,EAAD,CAAaC,QAAQ,YAAYC,aAAW,iCAA5C,UACE,cAACC,EAAA,EAAD,CAAQC,QAASP,EAAWQ,MAAM,YAAlC,kBACA,cAACF,EAAA,EAAD,CAAQG,UAAU,EAAlB,SAAyBrB,IACzB,cAACkB,EAAA,EAAD,CAAQC,QAASN,EAAWO,MAAM,UAAlC,qBAGF,qBAAKN,UAAWhB,EAAQN,OAAxB,SACA,eAAC,IAAD,CAAO8B,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,YAAaZ,UAAWhB,EAAQJ,MAAhF,UACGW,IACA1B,EAAeC,GApDH,SAAC+C,GAElB,IAAIC,EAAOC,KAAKC,MAAMH,EAAEI,OAAO9C,IAAMY,GAAQA,EACzCmC,EAAOH,KAAKC,MAAMH,EAAEI,OAAO5C,IAAMU,GAAQA,EAC7CK,EAAY,CAAChB,EAAE0C,EAAKxC,EAAE4C,IAEtBL,EAAEI,OAAOE,GAAG,CAAChD,EAAE2C,EAAMzC,EAAE6C,gBEvBZE,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.47874ae6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useCallback, useEffect } from \"react\";\r\nimport { Layer, Image } from \"react-konva\";\r\nimport useImage from 'use-image';\r\n\r\nexport function DraggableLayer(position, onDragMove) {\r\n    const [image] = useImage(`/assets/ladder_grid.png`);\r\n\r\n    return (\r\n        <Layer >\r\n            <Image \r\n                image={image} \r\n                draggable={true}\r\n                x={position.X}\r\n                y={position.Y}\r\n                onDragMove={onDragMove}                \r\n            />\r\n        </Layer>\r\n    )\r\n}","import { useState, useEffect, useCallback } from 'react';\r\nimport { Stage } from 'react-konva';\r\nimport { Button, ButtonGroup, makeStyles } from '@material-ui/core';\r\nimport { MinesLayer } from './components/MinesLayer';\r\nimport { DraggableLayer } from './components/DraggableLayer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  drawer: {\r\n    alignContent: 'centered'\r\n  },\r\n  stage: {\r\n    backgroundColor: 'black'\r\n  }\r\n}));\r\n\r\nexport const MinesDrawer = () => {\r\n  const grid = 16;\r\n  const classes = useStyles();\r\n  const [level, setLevel] = useState(1);\r\n  const [position, setPosition] = useState({X:-grid*80,Y:-grid*120});\r\n  const [lastLevel, setLastLevel] = useState(1);\r\n\r\n  const minesLayer = useCallback(() => {\r\n    let floor = level % 40;\r\n    return MinesLayer(floor);\r\n  }, [level])\r\n\r\n  // callback when moving the ladder layer\r\n  const onDragMove = (e) => {\r\n    // calculate the correct grid loc\r\n    let newX = Math.round(e.target.x() / grid) * grid;\r\n    let newY = Math.round(e.target.y() / grid) * grid;\r\n    setPosition({X:newX,Y:newY})\r\n    // snap to the grid\r\n    e.target.to({x:newX, y:newY});\r\n  }\r\n  \r\n  // modify the position when level changes\r\n  useEffect(() => {\r\n    let levelDiff = (level - lastLevel) * grid;\r\n    setPosition({X:position.X, Y:position.Y+levelDiff})\r\n  }, [lastLevel, level, setPosition])\r\n\r\n  // go up a floor\r\n  const clickPrev = useCallback(() => {\r\n    setLastLevel(level)\r\n    if (level == 1) { return; }\r\n    let floor = level - 1;\r\n    \r\n    if (floor % 10 == 0) {\r\n      setLevel(floor-1);\r\n    } else {\r\n      setLevel(floor)\r\n    }\r\n  }, [level, setLevel])\r\n\r\n  // go down a floor\r\n  const clickNext = useCallback(() => {\r\n    setLastLevel(level)\r\n    if (level == 119) { return; }\r\n    let floor = level + 1;\r\n\r\n    if (floor % 10 == 0) {\r\n      setLevel(floor+1);\r\n    } else {\r\n      setLevel(floor)\r\n    }\r\n  }, [level, setLevel])\r\n\r\n  return (\r\n    <div className={classes.drawer}>\r\n      <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\r\n        <Button onClick={clickPrev} color=\"secondary\">Prev</Button>\r\n        <Button disabled={true}>{level}</Button>\r\n        <Button onClick={clickNext} color=\"primary\">Next</Button>\r\n      </ButtonGroup>\r\n      \r\n      <div className={classes.drawer}>\r\n      <Stage width={window.innerWidth} height={window.innerHeight} className={classes.stage}>\r\n        {minesLayer()}\r\n        {DraggableLayer(position, onDragMove)}\r\n      </Stage>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { Layer, Image } from \"react-konva\";\r\nimport useImage from 'use-image';\r\n\r\nexport function MinesLayer(floor) {\r\n    const FloorImage = (level) => {\r\n        const [image] = useImage(`/assets/${level}.png`);\r\n        return <Image image={image} />;\r\n      };\r\n    return (\r\n        <Layer>\r\n            {FloorImage(floor)}\r\n        </Layer>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { MinesDrawer } from './mines';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MinesDrawer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}